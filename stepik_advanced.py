#
from decimal import *
from fractions import Fraction
import math
import string
from random import *

a, b = int(input()), int(input())
print(a + b, a - b, a * b, a / b, a // b, a % b, (a ** 10 + b ** 10) ** 0.5, sep='\n')

#
mass, rost = float(input()), float(input())
imt = mass / (rost * rost)
if imt < 18.5: print('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')
elif 18.5 <= imt <= 25: print('–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞')
elif imt > 25: print('–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')

#
s = len(input()) * 60
print(f'{s // 100} —Ä. {s % 100} –∫–æ–ø.')

#
animals = ["–û–±–µ–∑—å—è–Ω–∞", "–ü–µ—Ç—É—Ö", "–°–æ–±–∞–∫–∞", "–°–≤–∏–Ω—å—è", "–ö—Ä—ã—Å–∞",
           "–ë—ã–∫", "–¢–∏–≥—Ä", "–ó–∞—è—Ü", "–î—Ä–∞–∫–æ–Ω", "–ó–º–µ—è", "–õ–æ—à–∞–¥—å", "–û–≤—Ü–∞"]
print(animals[int(input()) % 12])

#–ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
n, k = int(input()), int(input())
s = [i for i in range(1, n + 1)]
while len(s) > 1:
    for q in range(0, k - 1):
        s.append(s[q])
    del s[:k]
print(*s)

#–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
def definition_quarter(x, y):
    quarter = 0
    if x == 0 or y == 0: quarter = 0
    if x < 0 and y > 0: quarter = 2
    elif x > 0 and y > 0: quarter = 1
    elif x < 0 and y < 0: quarter = 3
    elif x > 0 and y < 0: quarter = 4
    return quarter

n = int(input())
ls = [input().rsplit() for i in range(n)]
qu1, qu2, qu3, qu4 = 0, 0, 0, 0
for i in ls:
    x, y = int(i[0]), int(i[1])
    temp = definition_quarter(x, y)
    if temp == 0: continue
    elif temp == 1: qu1 += 1
    elif temp == 2: qu2 += 1
    elif temp == 3: qu3 += 1
    elif temp == 4: qu4 += 1
print(f'–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {qu1}' + '\n' +
      f'–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {qu2}' + '\n' +
      f'–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: {qu3}' + '\n' +
      f'–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {qu4}')

#–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ ü§ñüå∂Ô∏èüå∂Ô∏è
ls = [input() for i in range(int(input()))]
s_main = 'anton'
s_temp = ''
for s in ls:
    s_temp = s
    for i in s_main:
        if i in s_temp:
           s_temp = s_temp[s_temp.find(i):]
        else:
            break
    else:
        print(ls.index(s) + 1, end=' ')

#–†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É stepik
word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
a = [chr(i) for i in range(1072,1184) if chr(i) != '—ë']
for x in a:
    if x in word:
        print(word, x)
        word = word.replace(x, '').replace('  ', ' ').strip()

# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
def word_chek(new_word):
    result = 0
    if new_word == '–∫–∞–º–µ–Ω—å': result = 1
    elif new_word == '–Ω–æ–∂–Ω–∏—Ü—ã': result = 2
    elif new_word == '–±—É–º–∞–≥–∞': result = 3
    elif new_word == '—è—â–µ—Ä–∏—Ü–∞': result = 4
    elif new_word == '–°–ø–æ–∫': result = 5
    return result

def game_chek(timur, ruslan):
    s_result = ''
    if timur == 1 and ruslan == 2: s_result = '–¢–∏–º—É—Ä'
    elif timur == 2 and ruslan == 3: s_result = '–¢–∏–º—É—Ä'
    elif timur == 3 and ruslan == 1: s_result = '–¢–∏–º—É—Ä'
    elif timur == 1 and ruslan == 4: s_result = '–¢–∏–º—É—Ä'
    elif timur == 2 and ruslan == 4: s_result = '–¢–∏–º—É—Ä'
    elif timur == 3 and ruslan == 5: s_result = '–¢–∏–º—É—Ä'
    elif timur == 4 and ruslan == 5: s_result = '–¢–∏–º—É—Ä'
    elif timur == 4 and ruslan == 3: s_result = '–¢–∏–º—É—Ä'
    elif timur == 5 and ruslan == 1: s_result = '–¢–∏–º—É—Ä'
    elif timur == 5 and ruslan == 2: s_result = '–¢–∏–º—É—Ä'

    if timur == 1 and ruslan == 3: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 2 and ruslan == 1: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 3 and ruslan == 2: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 1 and ruslan == 5: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 2 and ruslan == 5: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 3 and ruslan == 4: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 4 and ruslan == 1: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 4 and ruslan == 2: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 5 and ruslan == 3: s_result = '–†—É—Å–ª–∞–Ω'
    elif timur == 5 and ruslan == 4: s_result = '–†—É—Å–ª–∞–Ω'

    if timur == ruslan: s_result = '–ù–∏—á—å—è'
    return print(s_result)

game_chek(word_chek(input()),word_chek(input()))

#–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏
def digit(num1, num2):
    if num1 % num2 == 0: return '–¥–µ–ª–∏—Ç—Å—è'
    else: return '–Ω–µ –¥–µ–ª–∏—Ç—Å—è'
print(digit(int(input()),int(input())))

list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
total = 0
counter = 0
for i in list1:
    total += sum(i)
    counter += len(i)
print(total / counter)

#–°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É
n = int(input())
ls = []
for i in range(n):
    ls2 = []
    for k in range(n):
        ls2.append(k + 1)
    ls.append(ls2)
print(*ls, sep = '\n')

#–£–ø–∞–∫–æ–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
ls_original = input().split()
ls_new = [[ls_original[0]]]
for i in range(1, len(ls_original)):
    if ls_original[i] == ls_original[i - 1]:
        # list[-1] - (-1) –∏–Ω–¥–µ–∫—Å, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏–æ—Å–∫
        ls_new[-1].append(ls_original[i])
    else:
        ls_new.append([ls_original[i]])
print(ls_new)

#–ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞
ls_original = input().split()
ls = [[]]
for i in range(len(ls_original)):
    for j in range(len(ls_original) - i):
        ls.append(ls_original[j:j + i + 1])
print(ls)

#–í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 1
n, m = int(input()), int(input())
# –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É –º–∞—Ç—Ä–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º N –∏ M
ls = [[input() for _ in range(m)] for _ in range(n)]
#–í—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª—ã
for i in range(n):
    for j in range(m):
        print(ls[i][j], end=' ')
    print()
#–í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
# for st in maxtix:
    # print(*st)

# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 2
n, m = int(input()), int(input())
# –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É –º–∞—Ç—Ä–∏—Ü—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º N –∏ M
ls = [[input() for _ in range(m)] for _ in range(n)]
ls_copy = [[ls[i][j] for i in range(n)] for j in range(m)]
#–í—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª—ã
for i in range(n):
    for j in range(m):
        print(ls[i][j], end=' ')
    print()
print()
#–í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
for i in ls_copy:
    print(*i)

#–°–ª–µ–¥ –º–∞—Ç—Ä–∏—Ü—ã ‚ÜòÔ∏è
n = int(input())
ls = [input().split() for _ in range(n)]
summ = 0
for i in range(n):
    summ += int(ls[i][i])
print(summ)

#–ë–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
n = int(input())
# –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É —á–µ—Ä–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
# –ø–æ—Å–ª–µ –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫(–≤ –º–∞—Ç—Ä–∏—Ü—É)
ls = [[int(x) for x in input().split()] for _ in range(n)]
for i in ls:
    mean = 0
    for j in i:
        if j > (sum(i) / n): mean += 1
    print(mean)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 1
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
# –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –∏–∑ –ø–æ–ª–æ–≤–∏–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —á–µ—Ä–µ–∑ —Å—Ä–µ–∑
ls_new = [ls[i][:i + 1] for i in range(n)]
ls_temp = []
for i in ls_new:
    ls_temp.append(max(i))
print(max(ls_temp))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2 üå∂Ô∏è
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
mx = ls[0][0]
for i in range(n):
    for j in range(n):
        if (i >= j and i <= n - 1 - j or
            i <= j and i >= n - 1 - j) and ls[i][j] > mx:
            mx = ls[i][j]
print(mx)

#–°—É–º–º—ã —á–µ—Ç–≤–µ—Ä—Ç–µ–π
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
up, left, right, down = 0, 0, 0, 0
for i in range(n):
    for j in range(n):
        if i < j and i > n - 1 - j: right += ls[i][j]
        if i < j and i < n - 1 - j: up += ls[i][j]
        if i > j and i < n - 1 - j: left += ls[i][j]
        if i > j and i > n - 1 - j: down += ls[i][j]
print(f'–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {up}', f'–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {right}',
      f'–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {down}', f'–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {left}', sep='\n')

# –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
n, m = int(input()), int(input())
ls = [[i * j for i in range(m)] for j in range(n)]
for i in range(n):
    for j in range(m):
        print(str(ls[i][j]).ljust(3), end='')
    print()

# –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ üîù
n, m = int(input()), int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
x, y = 0, 0
el_max = ls[0][0]
for i in range(n):
    for j in range(m):
        if ls[i][j] > el_max:
            el_max = ls[i][j]
            x = i
            y = j
print(x, y)

# –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ ‚è∏Ô∏è
n, m = int(input()), int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
s = input()
swap_i, swap_j = int(s[0]), int(s[2])
for i in range(n):
    ls[i][swap_j], ls[i][swap_i] = ls[i][swap_i], ls[i][swap_j]
for i in ls:
    print(*i)

#–û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π üîÉ
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
for i in range(n):
    ls[i][i], ls[n - i - 1][i] = ls[n - i - 1][i], ls[i][i]
for i in ls: print(*i)

# –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ü¶ã
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
for i in range(n // 2):
    for j in range(n):
        ls[i][j], ls[n - i - 1][j] = ls[n - i - 1][j], ls[i][j]
for i in ls: print(*i)

#–•–æ–¥—ã –∫–æ–Ω—è üêé
x, y = input()
n = 8
ls = [['.'] * n for _ in range(n)]
y = n - int(y)
x = ord(x) - 97
ls[y][x] = 'N'
for i in range(n):
    for j in range(n):
        if abs(i - y) * abs(j - x) == 2:
            ls[i][j] = '*'
for i in ls: print(*i)

# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç ‚ú®üå∂Ô∏è
n = int(input())
ls = [[int(x) for x in input().split()] for _ in range(n)]
digits = [i for i in range(1, n ** 2 + 1)]
d1, d2, = 0, 0
for i in range(n):
    j_summ, i_summ = 0, 0
    for j in range(n):
        j_summ += ls[j][i]
        i_summ += ls[i][j]
        if ls[i][j] in digits:
            digits.remove(ls[i][j])
    d1 += ls[i][i]
    d2 += ls[i][n - i - 1]
    if j_summ != i_summ:
        break
if j_summ == i_summ == d1 == d2 and digits == []: print('YES')
else: print('NO')

#–®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞
n, m = input().split()
ls = [[0] * int(m) for _ in range(int(n))]
for i in range(int(n)):
    for j in range(int(m)):
        if (i + j) % 2 == 0: ls[i][j] = '.'
        else: ls[i][j] = '*'
for i in ls:
    print(*i)

#–ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
n = int(input())
ls = [[0] * n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if j == n - i - 1: ls[i][j] = 1
        elif (i > j or i < j or i == j) and i > n - 1 - j: ls[i][j] = 2
for i in ls:
    print(*i)

#–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1
n, m = [int(i) for i in input().split()]
ls = [[0] * m for _ in range(n)]
count = 0
for i in range(n):
    for j in range(m):
        count += 1
        ls[i][j] = count
for i in range(n):
    for j in range(m):
        print(str(ls[i][j]).ljust(3), end=' ')
    print()

#–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2
n, m = [int(i) for i in input().split()]
ls = [[0] * m for _ in range(n)]
count = 0
for i in range(m):
    for j in range(n):
        count += 1
        ls[j][i] = count
for i in range(n):
    for j in range(m):
        print(str(ls[i][j]).ljust(3), end=' ')
    print()

#–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üåÄüå∂Ô∏èüå∂Ô∏è
n, m = [int(i) for i in input().split()]
ls = [[0] * m for _ in range(n)]
x, y = 0, 0
dx, dy = 0, 1
ls[0][0] = 1
count = 2
while count <= n * m:
    if 0 <= x + dx <= n - 1 and 0 <= y + dy <= m - 1 and ls[x + dx][y + dy] == 0:
        ls[x + dx][y + dy] = count
        count += 1
        x += dx
        y += dy
    else:
        if dy == 1:
            dy = 0
            dx = 1
        elif dx == 1:
            dx = 0
            dy = -1
        elif dy == -1:
            dy = 0
            dx = -1
        elif dx == -1:
            dx = 0
            dy = 1

for i in range(n):
    for j in range(m):
        print(str(ls[i][j]).ljust(3), end=' ')
    print()

# –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
n, m = [int(i) for i in input().split()]
ls1 = [[int(x) for x in input().split()] for _ in range(n)]
input()
ls2 = [[int(x) for x in input().split()] for _ in range(n)]
ls_new = [[ls1[i][j] + ls2[i][j] for j in range(m)] for i in range(n)]
for i in ls_new:
    print(*i)

# –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è
s_temp = 0
n, m = [int(i) for i in input().split()]
ls1 = [[int(x) for x in input().split()] for _ in range(n)]
input()
n1, m1 = [int(i) for i in input().split()]
ls2 = [[int(x) for x in input().split()] for _ in range(n1)]
ls_new = [[0] * m1 for _ in range(n)]
for i in range(n):
    for q in range(m1):
        for k in range(m):
            s_temp += ls1[i][k] * ls2[k][q]
        ls_new[i][q] = s_temp
        s_temp = 0
for i in ls_new:
    print(*i)

# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å üå∂Ô∏è
n = int(input())
ls1 = [[int(x) for x in input().split()] for _ in range(n)]
x = int(input())
ls2 = ls1
for _ in range(x - 1):
    ls3 = [[0] * n for _ in range(n)]
    for i in range(n):
        for q in range(n):
            for k in range(n):
                ls3[i][q] += ls1[i][k] * ls2[k][q]
    ls1 = ls3
for i in ls1:
    print(*i)

tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
new_tuples = [(i[:-1]) + (100,) for i in tuples]
print(new_tuples)

#–í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã
tup = tuple([int(input()) for _ in range(3)])
ls_temp = [0.0, 0.0]
ls_temp[0] = -(tup[1] / (2 * tup[0]))
ls_temp[1] = (4 * tup[0] * tup[2] - tup[1] ** 2) / (4 * tup[0])
tup = tuple(ls_temp)
print(tup)

# –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä
n = int(input())
# –í–≤–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ—Ä—Ç–µ–∂–µ–π
tp = tuple(tuple(input().split()) for _ in range(n))
for i in tp: print(*i)
print()
for i in tp:
    if int(i[1]) >= 4: print(*i)

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¢—Ä–∏–±–æ–Ω–∞—á—á–∏
n = int(input())
m1, m2, m3 = 1, 1, 1
for i in range(n):
    print(m1, end = ' ')
    m1, m2, m3 = m2, m3, m1 + m2 + m3

# 8.4 –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
# –¢—Ä–∏ —Å–ª–æ–≤–∞
s1, s2, s3 = [set(i) for i in input().split()]
if s1 == s2 == s3: print('YES')
else: print('NO')

# 8.5 –ú–µ—Ç–æ–¥—ã –º–Ω–æ–∂–µ—Å—Ç–≤. –ß–∞—Å—Ç—å 1
# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 1
ls = [set(input().lower()) for i in range(int(input()))]
for i in ls: print(len(i))

# –°—á–µ—Ç—á–∏–∫ –≤–µ—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π ‚úÖüå∂Ô∏èüå∂Ô∏è
student = set()
n = int(input())
correct = 0
for _ in range(n):
    resualt = input().split(': ')
    if resualt[1] == 'Correct':
        correct += 1
        student.add(resualt[0])
if correct:
    print(f'–í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ {len(student)} —É—á–∞—â–∏—Ö—Å—è')
    print(f'–ò–∑ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ {round((correct / n) * 100 + 0.001)}% –≤–µ—Ä–Ω—ã—Ö')
else: print('–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Ä–µ—à–∏—Ç —ç—Ç—É –∑–∞–¥–∞—á—É')

# –û–±—â–∏–µ —á–∏—Å–ª–∞
set1, set2 = set(input().split()), set(input().split())
set3 = set1 & set2
# –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ key=int
ls = sorted(set3, key=int)
print(*ls)

# –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã
ls = [set(input()) for i in range(int(input()))]
set1 = ls[0]
for i in range(1, len(ls)):
    set1.intersection_update(ls[i])
print(*sorted(set1))

#–í—Å–µ —Ü–∏—Ñ—Ä—ã üî¢
set1 = set(input())
set2 = set(input())
flag = set1.issuperset(set2)

# –í—ã–≤–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö (
# (–∫–æ—Ä—Ç–µ–∂, –≥–¥–µ 0 –∏–Ω–¥–µ–∫—Å NO –∏ 1 –∏–Ω–¥–µ–∫—Å YES)
# [–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è flag(–∏–ª–∏ 0(true) –∏–ª–∏ 1(false)])
print(('NO', 'YES')[flag])

#–£—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ üß†
set1, set2, set3 = [set(input().split()) for _ in range(3)]
print(*sorted((set1 | set2 | set3) - (set1 & set2 & set3), key=int))

#–£—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())
set3 = set(int(i) for i in input().split())
set_new = set(range(11))
print(*sorted(set_new - set1 - set2 - set3))

#8.8 –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ frozenset
# {–≤—ã—Ä–∞–∂–µ–Ω–∏–µ for –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è in –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å}
words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime', 'Lemon', 'grapes', 'persimmon', 'tangerine', 'Watermelon', 'currant', 'Almond']
newset = {i[0].lower() for i in words}
print(*sorted(newset))

# –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ üìö
m, n = int(input()), int(input())
flag = 0
home = {input() for _ in range(m)}
ls = [('NO', 'YES')[input() in home] for _ in range(n)]
print(*ls, sep='\n')

n = int(input())
res = {input() for _ in range(int(input()))}
for _ in range(n - 1):
    res &= {input() for _ in range(int(input()))}
print(*sorted(res), sep= '\n')

users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
         {'name': 'Helga', 'phone': '555-1618'},
         {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
         {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
         {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
         {'name': 'John', 'phone': '233-421-32', 'email': ''},
         {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
         {'name': 'Alina', 'phone': '+7948-799-2434'},
         {'name': 'Robert', 'phone': '420-2011', 'email': ''},
         {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
         {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
         {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
         {'name': 'Roman', 'phone': '+7459-145-8059'},
         {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
         {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
         {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
newlis = []
for el in users:
    if 'email' not in el or el['email'] == '' : newlis.append(el['name'])
print(*sorted(newlis))

my_dict = {
    0: 'zero',
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine'}
ls = [int(i) for i in input()]
ls_new = [my_dict[i] for i in ls]
print(*ls_new)

#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö üéì
course = {'CS101': {'room': 3004, 'prepod': '–•–∞–π–Ω—Å', 'time': '8:00' },
          'CS102': {'room': 4501, 'prepod': '–ê–ª—å–≤–∞—Ä–∞–¥–æ', 'time': '9:00' },
          'CS103': {'room': 6755, 'prepod': '–†–∏—á', 'time': '10:00' },
          'NT110': {'room': 1244, 'prepod': '–ë–µ—Ä–∫', 'time': '11:00' },
          'CM241': {'room': 1411, 'prepod': '–õ–∏', 'time': '13:00' }}
number = input()
print(f'{number}: {course[number]['room']}, {course[number]['prepod']}, '
      f'{course[number]['time']}')

# –ù–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π üì©
symbol_numbers = {'1': '.,?!:',
                  '2': 'ABC',
                  '3': 'DEF',
                  '4': 'GHI',
                  '5': 'JKL',
                  '6': 'MNO',
                  '7': 'PQRS',
                  '8': 'TUV',
                  '9': 'WXYZ',
                  '0': ' '}
s = input().upper()
s_new = ''
for el in s:
    for key, value in symbol_numbers.items():
        if el in value: print(key * (value.index(el) + 1), end= '')

# –ö–æ–¥ –ú–æ—Ä–∑–µ
letters = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789']
morse = ['.-', '-...', '-.-.', '-..', '.', '..-.',
         '--.', '....', '..', '.---', '-.-', '.-..',
         '--', '-.', '---', '.--.', '--.-', '.-.', '...',
         '-', '..-', '...-', '.--', '-..-', '-.--', '--..',
         '-----', '.----', '..---', '...--', '....-', '.....',
         '-....', '--...', '---..', '----.']
s = input().upper()
mydict = dict(zip(letters, morse))
for key in s:
    if key in mydict: print(mydict[key], end= ' ')

#–ö–≤–∞–¥—Ä–∞—Ç—ã –∫–ª—é—á–µ–π
result = {}
for i in range(1, 16): result.setdefault(i, i ** 2)
print(result)

#–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45, 'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777, 'c': 12, 'p': 123, 'w': 111, 'z': 666}
result = dict1.copy()
for key, value in dict2.items():
    result[key] = result.get(key, 0) + value

#–ü–æ–¥—Å—á–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏–π
text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'
result = {}
for i in text:
    result[i] = result.setdefault(i, 0) + 1
print(result)

#–ù–∞–∏–±–æ–ª–µ–µ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ—Å—è —Å–ª–æ–≤–æ
s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'
ls = s.split()
mydict = {}
v_max = 0
key_max = 0
for el in ls:
    mydict[el] = mydict.setdefault(el, 0) + 1
    if mydict[el] > v_max:
        v_max = mydict[el]
        key_max = el
print(key_max)

#–°–ø–∏—Å–æ–∫ pets
pets = [('Hatiko', 'Parker', 'Wilson', 50),
        ('Rusty', 'Josh', 'King', 25),
        ('Fido', 'John', 'Smith', 28),
        ('Butch', 'Jake', 'Smirnoff', 18),
        ('Odi', 'Emma', 'Wright', 18),
        ('Balto', 'Josh', 'King', 25),
        ('Barry', 'Josh', 'King', 25),
        ('Snape', 'Hannah', 'Taylor', 40),
        ('Horry', 'Martha', 'Robinson', 73),
        ('Giro', 'Alex', 'Martinez', 65),
        ('Zooma', 'Simon', 'Nevel', 32),
        ('Lassie', 'Josh', 'King', 25),
        ('Chase', 'Martha', 'Robinson', 73),
        ('Ace', 'Martha', 'Williams', 38),
        ('Rocky', 'Simon', 'Nevel', 32)]

result = {}
for el in pets:
    result.setdefault(el[1:], []).append(el[0])
print(result)

# –°–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ üå∂Ô∏è
ls = [i.lower().strip(".,!?:;-") for i in input().split()]
mydict = {}
for i in ls:
    mydict[i] = ls.count(i)
result = {}
min_count = min(mydict.values())
for key, value in mydict.items():
    if value == min_count:
        result[key] = value
print(min(result))

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
ls = input().lower().split()
mydict = {}
ls_new = []
for el in ls:
    if el not in ls_new: ls_new.append(el)
    else:
        mydict[el] = mydict.get(el, 0) + 1
        ls_new.append(el + '_' + str(mydict[el]))
print(*ls_new)

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ üìò
it_dict = {}
for _ in range(int(input())):
    k, v = input().split(': ')
    it_dict[k.lower()] = v
for _ in range(int(input())):
    s = input().lower()
    print(it_dict.get(s, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'))

#–ê–Ω–∞–≥—Ä–∞–º–º—ã 1
s1 = sorted(input())
s2 = sorted(input())
dict1, dict2 = dict(zip(range(len(s1)), s1)), dict(zip(range(len(s2)), s2))
print('YES') if dict2 == dict1 else print('NO')

# –ê–Ω–∞–≥—Ä–∞–º–º—ã 2
s1 = sorted([i for i in input().lower() if i.isalpha()])
s2 = sorted([i for i in input().lower() if i.isalpha()])
dict1, dict2 = dict(zip(range(len(s1)), s1)), dict(zip(range(len(s2)), s2))
print('YES') if dict2 == dict1 else print('NO')
# –¢–æ–∂–µ —Å–∞–º–æ–µ —á–µ—Ä–µ–∑ —Ñ—É–∫–Ω—Ü–∏—é
def s(word):
    res = {}
    for i in word.lower():
        if i.isalpha():
            res[i] = res.get(i, 0) + 1
    return res
print(("NO", "YES")[s(input()) == s(input())])


# –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
dict_sinonim = {}
for _ in range(int(input())):
    k, v = input().split()
    dict_sinonim[k] = v
sinonim = input()
for k, v in dict_sinonim.items():
    if sinonim == k: print(v)
    if sinonim == v: print(k)

# –°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
country = {}
for _ in range(int(input())):
    c, *cities = input().split()
    country[c] = cities
for _ in range(int(input())):
    k = input()
    for key, value in country.items():
        if k in value: print(key)

# –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ üìí
dict_book = {}
for _ in range(int(input())):
    number, name = input().lower().split()
    dict_book.setdefault(name, []).append(number)
for _ in  range(int(input())):
    s = input().lower()
    #–ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–∞–∫
    print(*dict_book[s]) if s in dict_book else print('–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    # –ê –º–æ–∂–Ω–æ –≤–æ—Ç —Ç–∞–∫, –±–µ–∑ –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ S –≤—ã—à–µ
    # print(*dict_book.get(input.lower(), ['–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω']))

# –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
s = input()
my_dict = {}
for _ in range(int(input())):
    value, key = input().split(': ')
    my_dict[int(key)] = value
for i in s: print(my_dict[s.count(i)], end='')

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π
numbers = [34, 10, -4, 6, 10, 23, -90, 100, 21, -35, -95,
           1, 36, -38, -19, 1, 6, 87]
result = {i: numbers[i] ** 2 for i in range(len(numbers))}
print(result)

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 5
s = '1:men 2:kind 90:number 0:sun 34:book 56:mountain 87:wood 54:car 3:island 88:power 7:box 17:star 101:ice'
result = {int(el.split(':')[0]): el.split(':')[1] for el in s.split()}
print(result)

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 6
numbers = [34, 10, 4, 6, 10, 23, 90, 100, 21,
           35, 95, 1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360]
result = {i: sorted([k for k in range(1, i + 1) if i % k == 0])for i in numbers}
print(result)

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 7
words = ['hello', 'bye', 'yes', 'no', 'python',
         'apple', 'maybe', 'stepik', 'beegeek']
result = {i: [ord(symb) for symb in i]for i in words}
print(result)

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 8
letters = {0: 'A', 1: 'B', 2: 'C', 3: 'D',
           4: 'E', 5: 'F', 6: 'G', 7: 'H',
           8: 'I', 9: 'J', 10: 'K', 11: 'L',
           12: 'M', 13: 'N', 14: 'O', 15: 'P',
           16: 'Q', 17: 'R', 18: 'S', 19: 'T',
           20: 'U', 21: 'V', 22: 'W', 23: 'X',
           24: 'Y', 26: 'Z'}
remove_keys = [1, 5, 7, 12, 17, 19, 21, 24]
result = {key: value for key, value in letters.items() if key not in remove_keys}

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 9
students = {'Timur': (170, 75), 'Ruslan': (180, 105),
            'Soltan': (192, 68), 'Roman': (175, 70),
            'Madlen': (160, 50), 'Stefani': (165, 70),
            'Tom': (190, 90), 'Jerry': (180, 87), 'Anna': (172, 67),
            'Scott': (168, 78), 'John': (186, 79), 'Alex': (195, 120),
            'Max': (200, 110), 'Barak': (180, 89), 'Donald': (170, 80),
            'Rustam': (186, 100), 'Alice': (159, 59), 'Rita': (170, 80),
            'Mary': (175, 69), 'Jane': (190, 80)}
result = {k: v for k, v in students.items() if v[0] > 167 and v[1] < 75}

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 10
tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12),
          (13, 14, 15), (16, 17, 18), (19, 20, 21),
          (22, 23, 24), (25, 26, 27), (28, 29, 30),
          (31, 32, 33), (34, 35, 36)]
result = {i[0]: i[1:] for i in tuples}
print(result)

#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π 11
student_ids = ['S001', 'S002', 'S003', 'S004', 'S005', 'S006', 'S007', 'S008', 'S009', 'S010', 'S011', 'S012', 'S013']
student_names = ['Camila Rodriguez', 'Juan Cruz', 'Dan Richards', 'Sam Boyle', 'Batista Cesare', 'Francesco Totti', 'Khalid Hussain', 'Ethan Hawke', 'David Bowman', 'James Milner', 'Michael Owen', 'Gary Oldman', 'Tom Hardy']
student_grades = [86, 98, 89, 92, 45, 67, 89, 90, 100, 98, 10, 96, 93]
result = [{i: {k: q}}for i, k, q in zip(student_ids, student_names, student_grades)]
print(result)

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ 1
my_dict = {'C1': [10, 20, 30, 7, 6, 23, 90], 'C2': [20, 30, 40, 1, 2, 3, 90, 12], 'C3': [12, 34, 20, 21], 'C4': [22, 54, 209, 21, 7], 'C5': [2, 4, 29, 21, 19], 'C6': [4, 6, 7, 10, 55], 'C7': [4, 8, 12, 23, 42], 'C8': [3, 14, 15, 26, 48], 'C9': [2, 7, 18, 28, 18, 28]}
my_dict = {i: [i for i in my_dict[k] if i <= 20]for k in my_dict}

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ 2
emails = {'nosu.edu': ['timyr', 'joseph', 'svetlana.gaeva', 'larisa.mamuk'],
          'gmail.com': ['ruslan.chaika', 'rustam.mini', 'stepik-best'],
          'msu.edu': ['apple.fruit', 'beegeek', 'beegeek.school'],
          'yandex.ru': ['surface', 'google'],
          'hse.edu': ['tomas-henders', 'cream.soda', 'zivert'],
          'mail.ru': ['angel.down', 'joanne', 'the.fame.moster']}
result = sorted([i + '@' + key for key, value in emails.items() for i in value])
print(*result, sep= '\n')

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –ú–∏–Ω—É—Ç–∫–∞ –≥–µ–Ω–µ—Ç–∏–∫–∏ üß¨
dnk_to_rnk = {"G":"C", "C":"G","T":"A","A":"U"}
result = [dnk_to_rnk[i] for i in input()]
print(*result, sep= '')

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
s = input().split()
reult = {}
for el in s:
    reult[el] = reult.get(el, 0) + 1
    print(reult[el], end=' ')

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ Scrabble game
const = {
    1: "AEILNORSTU",
    2: "DG",
    3: "BCMP",
    4: "FHVWY",
    5: "K",
    8: "JX",
    10: "QZ"
}
s = input().upper()
count = 0
for key, value in const.items():
    for i in s:
        if i in value: count+= key
print(count)

#–ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ üîé
def build_query_string(params):
    return '&'.join([f"{key}={value}" for key, value in sorted(params.items())])

# –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π üå∂Ô∏è
def merge(values):      # values - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    result = {}
    for d in values:
        for key in d:
            result.setdefault(key, set()).add((d[key]))
    return result

# –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –û–ø–∞—Å–Ω—ã–π –≤–∏—Ä—É—Å üòà
result = {}
dict_oper = {'W': 'write', 'R': 'read', 'X': 'execute'}
for _ in range(int(input())):
    x = input().split()
    result[x[0]] = [dict_oper[i] for i in x[1:]]
for _ in range(int(input())):
    x = input().split()
    if x[0] in result[x[1]]: print('OK')
    else: print('Access denied')

# –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–∏ –ü–æ–∫—É–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ üõíüå∂Ô∏è
result = {}
for _ in range(int(input())):
    key1, key2, value = input().split()
    result.setdefault(key1, {})
    result[key1][key2] = result[key1].get(key2, 0) + int(value)
for key, value in sorted(result.items()):
    print(f'{key}:')
    for i in sorted(value): print(i, value[i])

# 12.1 –ú–æ–¥—É–ª—å random. –ß–∞—Å—Ç—å 1
# import random
n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
for _ in range(n):
    print(random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞']))

# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
# import random
length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
s = ''
for _ in range(length):
    if random.randint(0, 1) == 1: s += chr(random.randint(65, 90))
    else: s += chr(random.randint(97, 122))
print(s)

# –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç
# import random
print(*sorted([random.randint(1, 49) for _ in range(7)]))

# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# import string
#
# print(string.ascii_letters)
# print(string.ascii_uppercase)
# print(string.ascii_lowercase)
# print(string.digits)
# print(string.hexdigits)
# print(string.octdigits)
# print(string.punctuation)
# print(string.printable)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# abcdefghijklmnopqrstuvwxyz
# 0123456789
# 0123456789abcdefABCDEF
# 01234567
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
# 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ \t\n\r\x0b\x0c

my_dict = {
    0: 'zero',
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine'}
ls = [int(i) for i in input()]
ls_new = [my_dict[i] for i in ls]
print(*ls_new)

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_ip()
# import random
def generate_ip():
    return f'{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}'
generate_ip()

# –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –õ–∞—Ç–≤–µ—Ä–∏–∏
# import random, string
# from random import randint, choice
def generate_index():
    s = string.ascii_uppercase
    return f'{choice(s)}{choice(s)}{randint(0, 99)}_{randint(0, 99)}{choice(s)}{choice(s)}'
generate_index()

#–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç
# import random
my_set = set()
while len(my_set) != 100:
    my_set.add(random.randint(1000000, 9999999))
    print(*my_set, sep = '\n')

# –ò–≥—Ä–∞ –≤ –±–∏–Ω–≥–æ
# import random
numbers = random.sample(list(range(1, 76)), 25)
matrix = [numbers[i:i + 5] for i in range(0, 21, 5)]
matrix[2][2] = 0
for i in range(5):
    for j in range(5):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()

#–¢–∞–π–Ω—ã–π –¥—Ä—É–≥ üïµüèªüå∂Ô∏è
# import random
my_friend =[input() for _ in range(int(input()))]
random.shuffle(my_friend)
for i in range(len(my_friend)):
    print(f'{my_friend[i - 1]} - {my_friend[i]}')

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 1
# import random
# import string
def generate_password(length):
    smbl = string.ascii_uppercase + string.ascii_lowercase + string.digits[2:]
    smbl = ''.join([symbol for symbol in smbl if symbol not in 'IloO'])
    return ''.join(random.sample(smbl, length))
def generate_passwords(count, length):
    return [generate_password(length) for _ in range(count)]

n, m = int(input()), int(input())
print(*generate_passwords(n, m), sep='\n')

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 2
# import random
# import string
def generate_password(length):
    upper_case = [i for i in string.ascii_uppercase if i not in 'IO']
    lower_case = [i for i in string.ascii_lowercase if i not in 'lo']
    digits = list(string.digits[2:])
    chars = upper_case + lower_case + digits
    result = [random.choice(i) for i in (upper_case, lower_case, digits)]
    result += [random.choice(chars) for i in range(length - 3)]
    return ''.join(result)
def generate_passwords(count, length):
    return [generate_password(length) for _ in range(count)]

n, m = int(input()), int(input())
print(*generate_passwords(n, m), sep='\n')

# 12.3 –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –∏ Bogosort
# import random

n = 10**6       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
k = 0
s0 = 16
for _ in range(n):
    x = random.uniform(-2, 2)
    y = random.uniform(-2, 2)
    if x**3 + y**4 + 2 >= 0 and 3 * x + y ** 2 <= 2: k += 1
print((k / n) * s0)

# 12.3 –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –∏ Bogosort
# import random
n = 10 ** 5
k = 0
s0 = 4

for _ in range(n):
    x = random.uniform(-1, 1)
    y = random.uniform(-1, 1)
    if x ** 2 + y ** 2 <= 1: k += 1
print((k / n) * s0)

# 13.1 –ú–æ–¥—É–ª—å decimal
# from decimal import *
num = Decimal(input())
tup = num.as_tuple().digits
print(max(tup) + min(tup) * (abs(num) >= 1))

#–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
# from decimal import *
d = Decimal(input())
print(d.exp() + d.ln() + d.log10() + d.sqrt())

# 13.2 –ú–æ–¥—É–ª—å fractions

# 13.1 –í—ã–≤–æ–¥ –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
numbers = ['6.34', '4.08', '3.04', '7.49', '4.45', '5.39', '7.82', '2.76',
           '0.71', '1.97', '2.54', '3.67', '0.14', '4.29', '1.84', '4.07',
           '7.26', '9.37', '8.11', '4.30', '7.16', '2.46', '1.27', '0.29',
           '5.12', '4.02', '6.95', '1.62', '2.26', '0.45', '6.91', '7.39',
           '0.52', '1.88', '8.38', '0.75', '0.32', '4.81', '3.31', '4.63',
           '7.84', '2.25', '1.10', '3.35', '2.05', '7.87', '2.40', '1.20', '2.58', '2.46']
for el in numbers: print(f'{el} = {Fraction(el)}')

# 13.2 –°—É–º–º–∞
s = ('0.78 4.3 9.6 3.88 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 '
     '0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.13 1.22 1.02 '
     '7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 '
     '5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50 0.123 0.00021')
ls = [float(i) for i in s.split()]
print(Fraction(str(min(ls) + max(ls))))

# 13.2 –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥—Ä–æ–±—å
m, n = int(input()), int(input())
print(Fraction(m, n))

# –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥—Ä–æ–±—è–º–∏
m, n = input(), input()
print(f'{m} + {n} = {Fraction(m) + Fraction(n)}',
      f'{m} - {n} = {Fraction(m) - Fraction(n)}',
      f'{m} * {n} = {Fraction(m) * Fraction(n)}',
      f'{m} / {n} = {Fraction(m) / Fraction(n)}', sep= '\n')

# –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 1
n = int(input())
print(sum([Fraction(1, i ** 2) for i in range(1, n + 1)]))

# –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 2
n = int(input())
print(sum([Fraction(1, math.factorial(i)) for i in range(1, n + 1)]))

# –Æ–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏–∫ ü§ìüå∂Ô∏è
n = int(input())
ls = []
for i in range(1, n - 1):
    for j in range(i + 1, n):
        k = Fraction(i, j)
        if k.numerator + k.denominator == n: ls.append(k)
print(max(ls))

# –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –¥—Ä–æ–±–∏
n = int(input())
m_set = set()
for i in range(1, n):
    for j in range(i + 1, n + 1):
        m_set.add(Fraction(i, j))
print(*sorted(m_set), sep = '\n')

#–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞
z1, z2 = complex(input()), complex(input())
print(f'{z1} + {z2} = {z1 + z2}\n'
      f'{z1} - {z2} = {z1 - z2}\n'
      f'{z1} * {z2} = {z1 * z2}\n')

numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j, -21 + 1j, 1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]
x = 0
for num in numbers:
    if abs(num) > abs(x): x = num
print(x, abs(x), sep='\n')

n = int(input())
z1, z2 = complex(input()), complex(input())
print(z1 ** n + z2 ** n + z1.conjugate() ** n + z2.conjugate() ** (n + 1))

# 14.1 –ú–æ–¥—É–ª—å —á–µ—Ä–µ–ø–∞—à–∫–∏. –ß–∞—Å—Ç—å 1
import turtle
def triangle(side):
    turtle.forward(side)
    turtle.left(120)
    turtle.forward(side)
    turtle.left(120)
    turtle.forward(side)
    turtle.left(120)
    turtle.exitonclick()
triangle(int(input()))

# 14.2 –ú–æ–¥—É–ª—å —á–µ—Ä–µ–ø–∞—à–∫–∏. –ß–∞—Å—Ç—å 2
def shalom(num):
    for _ in '123':
        turtle.forward(num)
        turtle.left(120)
    turtle.forward(num / 3)
    turtle.left(120)
    turtle.forward(num / 3 * 2)
    turtle.right(120)
    for _ in '123':
        turtle.forward(num)
        turtle.right(120)
shalom(100)

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏—à–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
size = int(input())  # –†–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤—ã (—Ä–∞–¥–∏—É—Å –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞)
pensize = size * 0.1  # –†–∞–∑–º–µ—Ä –ø–µ—Ä–∞
turtle.Screen().setup(600, 1000)
turtle.hideturtle()
turtle.pensize(pensize)
turtle.speed(0)

parts = {1: {"pos": (0, 0), "size": size,  # –ì–æ–ª–æ–≤–∞
             "circle": True, "color": "brown"},
         2: {"pos": (0, 0), "size": size * 0.6,  # –ù–æ—Å
             "circle": True, "color": "orange"},
         3: {"pos": (0, size * 0.3), "size": size * 0.3,  # –ù–æ–∑–¥—Ä–∏
             "circle": False, "color": "gray"},
         4: {"pos": (0, size * 0.6), "size": size * 0.1,  # –ö–æ–Ω—á–∏–∫
             "circle": True, "color": "yellow"},  # –Ω–æ—Å–∞
         5: {"pos": (size * -0.5, size * 1.2), "size": size * 0.1,  # –õ–µ–≤—ã–π
             "circle": True, "color": "black"},  # –≥–ª–∞–∑
         6: {"pos": (size * 0.5, size * 1.2), "size": size * 0.1,  # –ü—Ä–∞–≤—ã–π
             "circle": True, "color": "black"},  # –≥–ª–∞–∑
         7: {"pos": (size * -0.85, size * 1.8), "size": size * 0.3,  # –õ–µ–≤–æ–µ
             "circle": True, "color": "red"},  # —É—Ö–æ
         8: {"pos": (size * 0.85, size * 1.8), "size": size * 0.3,  # –ü—Ä–∞–≤–æ–µ
             "circle": True, "color": "red"}}  # —É—Ö–æ


def bear(pos, size, circle, color):
    turtle.penup()
    turtle.goto(pos)
    turtle.pencolor(color)
    turtle.pendown()
    if circle:
        turtle.setheading(0)
        ycor = pos[1]
        while (size > 0):
            turtle.circle(size)
            size -= pensize - 1
            ycor += pensize - 1
            turtle.goto(pos[0], ycor)
    else:
        turtle.setheading(90)
        turtle.forward(size)


for i in range(1, 9):
    bear(parts[i]["pos"], parts[i]["size"], parts[i]["circle"], parts[i]["color"])


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Ä–∏—Å—É–µ—Ç —Å–Ω–µ–∂–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ------------------------------------------------------------
SCREEN_SIZE = 400  # –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞
ACCESS_X = set(range(-SCREEN_SIZE // 2, SCREEN_SIZE // 2 + 1))  # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏
ACCESS_Y = set(range(-SCREEN_SIZE // 2, SCREEN_SIZE // 2 + 1))  # –ø–æ "x" –∏ "y"

turtle.Screen().setup(SCREEN_SIZE, SCREEN_SIZE)  # –†–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞
turtle.Screen().bgcolor("cyan")  # –¶–≤–µ—Ç —Ö–æ–ª—Å—Ç–∞
turtle.pencolor("blue")  # –¶–≤–µ—Ç –ø–µ—Ä–∞
turtle.speed(0)  # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–ø–∞—à–∫–∏
turtle.hideturtle()  # –í–∏–¥–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–ø–∞—à–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞
def star():
    global ACCESS_X, ACCESS_Y

    max_size = 0.4  # –ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–Ω–µ–∂–∏–Ω–∫–∏
    while (max_size >= 0.2):
        size = random.uniform(SCREEN_SIZE * 0.02, SCREEN_SIZE * max_size)
        x0 = random.choice(tuple(ACCESS_X))  # –í—ã–±–æ—Ä –∫–æ–æ—Ä. "x" –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
        y0 = random.choice(tuple(ACCESS_Y))  # –í—ã–±–æ—Ä –∫–æ–æ—Ä. "y" –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
        xcors = set(range(int(x0 - size / 2), int(x0 + size / 2)))  # –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö
        ycors = set(range(int(y0 - size / 2), int(y0 + size / 2)))  # —Ç–æ—á–µ–∫ "x" –∏ "y"

        # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—é
        if (len(xcors - ACCESS_X) == 0 and len(ycors - ACCESS_Y) == 0):
            turtle.penup()
            turtle.goto(x0, y0)  # –¶–µ–Ω—Ç—Ä —Å–Ω–µ–∂–∏–Ω–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            turtle.pendown()

            quarter = size / 2 / 4  # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–∞—Å—Ç—å –ª—É—á–∞ —Å–Ω–µ–∂–∏–Ω–∫–∏
            for _ in range(8):  # –¶–∏–∫–ª –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤–æ—Å—å–º–∏ –ª—É—á–µ–π
                for _ in range(4):  # –¶–∏–∫–ª –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —á–µ—Ç—ã—Ä–µ—Ö –≤–µ—Ç–æ—á–µ–∫ –Ω–∞ –¥–∞–Ω–Ω–æ–º –ª—É—á–µ
                    turtle.left(30)
                    turtle.forward(quarter)
                    turtle.backward(quarter)
                    turtle.right(60)
                    turtle.forward(quarter)
                    turtle.backward(quarter)
                    turtle.left(30)
                    turtle.forward(quarter)
                turtle.backward(size / 2)
                turtle.left(45)

            ACCESS_X -= xcors  # –ó–∞–Ω—è—Ç—ã–µ —Å–Ω–µ–∂–∏–Ω–∫–æ–π —Ç–æ—á–∫–∏
            ACCESS_Y -= ycors  # —É–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            print(len(ACCESS_X), len(ACCESS_Y))  # –ö–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
            break
        else:  # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –∑–∞–Ω—è—Ç–∞, —Ç–æ —É–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ
            max_size -= 0.1  # –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–Ω–µ–∂–∏–Ω–∫–∏

while (len(ACCESS_X) > SCREEN_SIZE * 0.2 and
       len(ACCESS_Y) > SCREEN_SIZE * 0.2):
    star()
print("DONE!")

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –∑–Ω–∞–∫ STOP –ø–æ –æ–±—Ä–∞–∑—Ü—É.
from turtle import *
speed(0)
hideturtle()
side = 110
angle = 180 * (8 - 2) / 8
x, y = 0, 0
colors = ('black', 'white', '#EA0F0F')

for i in range(3):
    penup()
    goto(x, y)
    color(colors[i])
    begin_fill()
    pendown()
    for _ in range(8):
        forward(side)
        left(180 - angle)
    end_fill()
    x += 2
    y += 5
    side -= 4

penup()
color(colors[1])
goto(55, 70)
write('STOP', align='center', font=('Arial Narrow', 75, 'normal'))

done()

"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é greet(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏–º–µ–Ω (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ) 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º."""
def count_args(*args):
    ls = [i for i in args if type(i) in (int, float)]
    if len(ls) == 0: return 0.0
    else: return sum(ls) / len(ls)
print(count_args(input()))

"""–§—É–Ω–∫–∏—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö"""
def greet(name, *args):
    s = " and ".join((name,) + args)
    return f'Hello, {s}!'

"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é info_kwargs(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ 
–∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: <–∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞>: <–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞>, 
–ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É—é—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)"""
def print_products(*args):
    ls = [i for i in args if type(i) == str and len(i) > 1]
    if len(ls) == 0: print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    else:
        for i in range(1, len(ls) + 1):
            print(f'{i}) {ls[i - 1]}')

"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é info_kwargs(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ
–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: <–∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞>: <–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞>,
–ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É—é—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)."""
def info_kwargs(**kwargs):
    for key,value in sorted(kwargs.items()):
        print(f'{key}: {value}')

ls = [i for i in range(10, 100)]
'''enumerate - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç'''
for inx, el in enumerate(ls):
    print(inx, el)


# 15.4 –§—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã
"""–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π min() –∏ 
max() –≤—ã–≤–æ–¥–∏—Ç —Ç–µ –∫–æ—Ä—Ç–µ–∂–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ), –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34),
           (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4),
           (90, 1, -45, -21)]
print(min(numbers, key=lambda mean: sum(mean) / len(mean)))
print(max(numbers, key=lambda mean: sum(mean) / len(mean)))

"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ points –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Ç–æ—á–∫–∏
(0;0)). –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫."""
points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
points.sort(key=lambda sort_p: (sort_p[0] ** 2 + sort_p[1] ** 2) ** 0.5)
print(points)

"""–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
–∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ numbers –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å—É–º–º–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ç–µ–∂–∞."""
numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100),
           (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
def sum_d(numbers):
    return max(numbers) + min(numbers)
numbers.sort(key=sum_d)
print(numbers)

"""–°–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ —Ö–æ—á–µ—à—å
–°–ø–∏—Å–æ–∫ athletes —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞—Ö –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π: (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é:
1: –ø–æ –∏–º–µ–Ω–∏;
2: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É;
3: –ø–æ —Ä–æ—Å—Ç—É;
4: –ø–æ –≤–µ—Å—É.
"""
athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39),
            ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30),
            ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100),
            ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]
def sorted_name(x):
    return x[0]
def sorted_age(x):
    return x[1]
def sorted_height(x):
    return x[2]
def sorted_mass(x):
    return x[3]
d_athletes = {1: sorted_name, 2: sorted_age, 3: sorted_height, 4: sorted_mass}
command = int(input())
q = sorted(athletes, key=d_athletes[command])
for i in q: print(*i)

"""                                 –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É.
–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
–∫–≤–∞–¥—Ä–∞—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç;
–∫—É–±: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫—É–±;
–∫–æ—Ä–µ–Ω—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞;
–º–æ–¥—É–ª—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–æ–¥—É–ª—å;
—Å–∏–Ω—É—Å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω—É—Å —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞."""
import math
def pwr(p):
    def n_power(n):
        return n ** p
    return n_power

command_dict = {'–∫–≤–∞–¥—Ä–∞—Ç': pwr(2), '–∫—É–±': pwr(3), '–∫–æ—Ä–µ–Ω—å': pwr(0.5), '–º–æ–¥—É–ª—å': abs, '—Å–∏–Ω—É—Å': math.sin}
n = int(input())
command = input()
print(command_dict[command](n))

"""–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞-1
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏—Ö —Ü–∏—Ñ—Ä. 
–ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä, —Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ."""
def summator(n):
    return sum([int(i) for i in str(n)])
numbers = [int(i) for i in input().split()]
print(*sorted(numbers, key=summator))

"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ map() –æ–∫—Ä—É–≥–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤,
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."""
def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result
def map_2(x):
    return round(x, 2)
numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828, 1.41546]
print(*map(map_2, numbers))


def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result
def number_if(x):
    return len(str(x)) == 3 and x % 5 == 2
def cube_number(x):
    return x ** 3


numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657,
           1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163,
           345, 394, 560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105, 130, 1363, 947, 72, 1278, 166, 904, 349,
           831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018,
           1274, 387, 120, 340, 963, 832, 1127]
print(*map(cube_number, filter(number_if, numbers)), sep='\n')

def reduce(operation, items, initial_value):
    acc = initial_value
    for item in items:
        acc = operation(acc, item)
    return acc
def square(s, x):
    return s + x ** 2


numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23,
           35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67,
           62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29,
           84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]
print(reduce(square, numbers, 0))

"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 7 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ filter(), map() –∏ sum().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–∞ 7 –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞."""
def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result

def seven_number(x):
    return len(str(abs(x))) == 2 and x % 7 == 0
def square_number(x):
    return x ** 2

numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202,
           58, 99, 270, 219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208,
           231, 178, 201, 260, -35, 152, 115, 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128,
           143, 43, 297, 229, 60, 254, -9, 5, 187, 220, -8, 111, 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135,
           7, -161, 65, 135, 29, 148, 242, 33, 35, 211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73,
           197, 272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94, 279, 129,
           39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]

print(sum(map(square_number, filter(seven_number, numbers))))

# from operator import *     #  –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
#
# print(add(10, 20))         #  —Å—É–º–º–∞
# print(floordiv(20, 3))     #  —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
# print(neg(9))              #  —Å–º–µ–Ω–∞ –∑–Ω–∞–∫–∞
# print(lt(2, 3))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ <
# print(lt(10, 8))           #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ <
# print(eq(5, 5))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ ==
# print(eq(5, 9))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ ==

"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(), map(), sorted()
–∏ reduce() –≤—ã–≤–æ–¥–∏—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Å–æ–∫ primary –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 10000000 —á–µ–ª–æ–≤–µ–∫"""
from functools import reduce

data = [['Tokyo', 35676000, 'primary'],
        ['New York', 19354922, 'nan'],
        ['Mexico City', 19028000, 'primary'],
        ['Mumbai', 18978000, 'admin'],
        ['Sao Paulo', 18845000, 'admin'],
        ['Delhi', 15926000, 'admin'],
        ['Shanghai', 14987000, 'admin'],
        ['Kolkata', 14787000, 'admin'],
        ['Los Angeles', 12815475, 'nan'],
        ['Dhaka', 12797394, 'primary'],
        ['Buenos Aires', 12795000, 'primary'],
        ['Karachi', 12130000, 'admin'],
        ['Cairo', 11893000, 'primary'],
        ['Rio de Janeiro', 11748000, 'admin'],
        ['Osaka', 11294000, 'admin'],
        ['Beijing', 11106000, 'primary'],
        ['Manila', 11100000, 'primary'],
        ['Moscow', 10452000, 'primary'],
        ['Istanbul', 10061000, 'admin'],
        ['Paris', 9904000, 'primary']]

cities = filter(lambda city: city[1] > 10 ** 7 and city[2] == 'primary', data)
cities = map(lambda city: city[0], cities)
cities = sorted(cities)
cities = 'Cities: ' + reduce(lambda city1, city2: f'{city1}, {city2}', cities)
print(cities)


"""–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
–∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã —Å–ª–æ–≤. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω—ã –∫–∞–∫–∏—Ö-—Ç–æ —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç, ‚Äì –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
 —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞."""
data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'),
        (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'),
        (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'),
        (7029917, 'Massachusetts'), (6910840, 'Tennessee')]
data = sorted(data, key=lambda el: el[1][-1], reverse=True)
for i in data: print(f'{i[1]}: {i[0]}')

"""–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã —Å–ª–æ–≤.
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω—ã –∫–∞–∫–∏—Ö-—Ç–æ —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç, ‚Äì –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞."""
data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥',
        '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º', '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥',
        '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
#–í–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ç–µ–∂ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —É—Å–ª–æ–≤–∏—é —Å–ª–æ–≤–∞ —Ä–∞–≤–Ω—ã, –±–µ—Ä–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ
print(*sorted(data, key=lambda x: (len(x), x)))

mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday',
              'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271,
              2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides',
              'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent',
              'bigot', 'abuse', 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet',
              859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish',
              'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon',
              2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse',
              'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]
mixed_list = max(filter(lambda x: type(x) == int, mixed_list), key=int)
print(mixed_list)

"""–°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
–ø—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ —Å—Ç—Ä–æ–∫. –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞."""
mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry', 15, 65, 'abate', 'thursday',
              76, 70, 94, 35, 36, 'berth', 41, 'abnormal', 'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60, 'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12, 'abuse', 78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet', 64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46, 'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday', 'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent', 76, 46, 'betray', 47, 'able', 11]
print(*sorted(filter(lambda x: type(x) == int, mixed_list)) +
       sorted(filter(lambda x: type(x) == str, mixed_list)))

#–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
print(*list(map(lambda x: 255 - x, [int(i) for i in input().split()])))

#–ó–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ üå∂Ô∏è
from functools import reduce
evalute = lambda coeff, x: reduce(lambda s, a: s * x + a, coeff)
print(evalute(map(int, input().split()), int(input())))

"""–§—É–Ω–∫—Ü–∏—è ignore_command() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç command ‚Äì –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ignore, –∏–ª–∏ False ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç.
"""
def ignore_command(command):
    ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update', 'exec', 'del', 'truncate']
    return any(filter(lambda x: x in command, ignore))

# """–ò—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º countries, capitals –∏ population,
# –≤—ã–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"""
countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
population = [145_934_462, 331_002_651, 80_345_321, 67_886_011, 65_273_511, 1_380_004_385]

for x, y, z in zip(countries, capitals, population):
    print(f'{y} is the capital of {x}, population equal {z} people.')



abscissas = [float(i) for i in input().split()]
ordinates = [float(i) for i in input().split()]
applicates = [float(i) for i in input().split()]
print(all(map(lambda x: x[0] ** 2 + x[1] ** 2 + x[2] ** 2 <= 4,
              zip(abscissas, ordinates, applicates))))

–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å
print(all(map(lambda x: x.isdigit() and 0 <= int(x) <= 255, input().split('.'))))

–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞
a, b = int(input()), int(input())
for i in range(a, b + 1):
    digits = [int(q) for q in str(i)]
    if all(map(lambda x: x != 0 and i % x == 0, digits)):
        print(i, end=' ')

–•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å
s = input()
print('YES'if all((any(i.isdigit() for i in s),
           any(i.islower() for i in s),
           any(i.isupper() for i in s),
           len(s) >= 7)) else 'NO')

–û—Ç–ª–∏—á–Ω–∏–∫–∏
ls = []
for i in range(int(input())):
    ls.append(any(['5' in input() for q in range(int(input()))]))
print('YES' if all(ls) else 'NO')

def generate_letter(mail, name, date, time, place, teacher = '–¢–∏–º—É—Ä –ì—É–µ–≤', number = 17):
    return f'''To: {mail}
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!
–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç {date}, –≤ {time}.
–ü–æ –∞–¥—Ä–µ—Å—É: {place}.
–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å {teacher} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {number}.
–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!'''

def pretty_print(data, side = '-', delimiter = '|'):
    stroka = f' {delimiter} '.join(map(str, data))
    print('', (len(stroka) + 2) * side)
    print(delimiter, stroka, delimiter)
    print('', (len(stroka) + 2) * side)


